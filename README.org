#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:t title:t toc:t todo:t |:t
#+TITLE: README
#+DATE: <2019-01-02 Wed>
#+AUTHOR: Christian Alexander
#+EMAIL: alexforsale@yahoo.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 26.1 (Org mode 9.1.9)
* Linuxfromscrath Scripts
  This repository is a compilation of scripts for automating [[www.linuxfromscratch.org/][linuxfromscratch]].
** Configuration
   Basic configuration is inside settings.conf file, I mainly using vm for this so nothing complicated.
   Also note that I skipped the bootloader stuff in grub section.
   - If you want to run "=make check= / =make test=" set the /TEST/ flag to "1".
   - The /BUILDDIR/ flag perhaps should be hardcoded.
   - I choose btrfs since my entire disk is on btrfs, and creating / deleting subvolume is more easier. Note that
     I never user other fs type, so edit the script accordingly.
   - The /SOURCES/ flag is for storing the downloaded files to host.
** Moving $LFS to a virtual machine
   - Use [[https://wiki.archlinux.org/index.php/Moving_an_existing_install_into_(or_out_of)_a_virtual_machine][this]] for guide
   - Create the container

   #+BEGIN_SRC shell
# use fallocate
[[ ! -d /media ]] && sudo mkdir -pv /media
sudo fallocate -l 16GiB -o 1024 /media/lfs.img # adjust the size
sudo modprobe -v loop
sudo losetup /dev/loop1 /media/lfs.img
sudo fdisk /dev/loop1
   #+END_SRC

   I'm using /fdisk/ for partitioning, with gpt table you'd want the first partition to be a [[https://wiki.archlinux.org/index.php/GRUB#GUID_Partition_Table_.28GPT.29_specific_instructions][BIOS boot partition]],
   with a suggested size 1MiB. Press =m= inside fdisk to see all available command. One thing to note if you want to
   define the size of a partition, do so in the last sector, e.g. for 1MiB you type /+1M/, for 1GiB is /+1G/.
   And for changing partition type, press =t= after creating the new partition, then you press =L= to list all available
   partition type, for bios boot is /4/.

   I'm using single root partition and a swap, so my final partition layout is:
   #+BEGIN_SRC shell :results output raw
sudo fdisk -l /dev/loop1
   #+END_SRC

   #+RESULTS:
   Disk /dev/loop1: 16 GiB, 17179870208 bytes, 33554434 sectors
   Units: sectors of 1 * 512 = 512 bytes
   Sector size (logical/physical): 512 bytes / 512 bytes
   I/O size (minimum/optimal): 512 bytes / 512 bytes
   Disklabel type: gpt
   Disk identifier: F7F99ACE-D26F-294B-9D4E-9B7ED2F68226

   Device         Start      End  Sectors Size Type
   /dev/loop1p1    2048     4095     2048   1M BIOS boot
   /dev/loop1p2    4096  4198399  4194304   2G Linux swap
   /dev/loop1p3 4198400 33554400 29356001  14G Linux filesystem

   - create filesystem for /dev/loop1p3
   #+BEGIN_SRC shell
sudo mkfs.ext4 -L "linuxfromscratch" /dev/loop1p3
   #+END_SRC

   - Transfer lfs system
     - mount the lfs partition
   #+BEGIN_SRC shell
# I'm using my own partition ofc
sudo mount -vt btrfs -o "defaults space_cache,compress,subvol=@lfs" /dev/sda7 /mnt/lfs
# if you don't want to include the /tools dir, remove it here
   #+END_SRC

   - put some tarballs for compiling at vm, without these theres no way to connect inside the vm.
     - [[http://www.linuxfromscratch.org/blfs/view/stable/basicnet/dhcpcd.html][dhcpcd]]
     - [[http://www.linuxfromscratch.org/blfs/view/stable/basicnet/wget.html][wget]]
     - [[http://www.linuxfromscratch.org/blfs/view/stable/introduction/bootscripts.html][blfs-bootscripts]]

   #+BEGIN_SRC 
link=('http://roy.marples.name/downloads/dhcpcd/dhcpcd-7.0.7.tar.xz'
      'https://ftp.gnu.org/gnu/wget/wget-1.19.5.tar.gz'
      'http://anduin.linuxfromscratch.org/BLFS/blfs-bootscripts/blfs-bootscripts-20180105.tar.xz')
pushd /mnt/virtual/sources
for l in ${link[@]};do
wget $l
done
popd
   #+END_SRC

   - create a temporary mount point for /dev/loop1p3

   #+BEGIN_SRC shell
sudo partprobe /dev/loop1 -s
sudo mkdir -pv /mnt/virtual
sudo mount -v /dev/loop1p3 /mnt/virtual
sudo rsync -aAXv /mnt/lfs/* /mnt/virtual --exclude={/dev/*,/proc/*,/sys/*,/tmp/*,/run/*,/mnt/*,/media/*,/lost+found}
   #+END_SRC

   - Convert the container
   #+BEGIN_SRC shell
[[ ! -d ~/VBoxVM ]] && mkdir -vp ~/VBoxVM
VBoxManage convertfromraw --format VDI /media/lfs.img ~/VBoxVM/lfs.vdi
   #+END_SRC

   - From here connect the converted container to the vm using bootable linux live cd and chroot into the partition
     to create bootloader.
     - Some linux live cd automatically put you in menu for installing(like minimal livecd and such), just move to
       the next tty for chrooting to lfs partition(usually =ALT+Right= arrow to move to next tty or =CTRL+ALT+F2= to move to tty2)
     - On some linux livecd, you could ssh immediately.
     - Inside the livecd command prompt, mount the lfs partition into a mountpoint
   #+BEGIN_SRC shell
# inside livecd command prompt
mkdir -pv /mn/linuxfromscratch # NOTE: some livecd must use sudo

# check the lfs partition with fdisk -l /dev/sda, mine is on /dev/sda3
# it's should be the same as the /dev/loop1 scheme, but now named as /dev/sda
mount -v /dev/sda3 /mnt/linuxfromscratch

# create swap filesystem, /dev/sda2
mkswap -L "swap" /dev/sda2
swapon /dev/sda2

for d in dev sys proc;do
mount -v --rbind /$d /mnt/linuxfromscratch/$d
fi
chroot /mnt/linuxfromscratch /bin/bash --login
   #+END_SRC

   - Continue with [[http://www.linuxfromscratch.org/lfs/view/stable/chapter08/grub.html][lfs instructions for grub]].

   #+BEGIN_SRC shell
grub-install /dev/sda --target=i386-pc

cat > /boot/grub/grub.cfg << "EOF"
# Begin /boot/grub/grub.cfg
set default=0
set timeout=5

insmod ext4
insmod part_msdos
set root=(hd0,3)

menuentry "GNU/Linux, Linux 4.18.5-lfs-8.3" {
        linux   /boot/vmlinuz-4.18.5-lfs-8.3 root=/dev/sda3 rw
}
EOF
   #+END_SRC

   - Poweroff the vm, remove the livecd and restart.

*** TODO Things to do inside VM [0/7]

    For now editing text files is using /vi/.
**** TODO set the terminal resolution [optional]
     when booting up to grub, press =c= for command-line mode:

     #+BEGIN_SRC 
# inside grub cmdline
set pager=1 # like less
vbeinfo 
     #+END_SRC

     Note the desired resolution, e.g. /0x145/ for /1280x1024x32/. Reset back the vm, still on the grub menu,
     press =e= for edit, append this line /vga=0x145/:

     #+BEGIN_SRC 
linux   /boot/vmlinuz-4.18.5-lfs-8.3 root=/dev/sda3 ro vga=0x145
     #+END_SRC
**** TODO fix /etc/profile
     update the file

     #+BEGIN_SRC 
export LANG=en_US.UTF-8
     #+END_SRC

**** TODO edit network configuration files [0/2]

***** TODO ifconfig.<iface> [0/2]

****** TODO install dhcpcd
       from [[http://www.linuxfromscratch.org/blfs/view/stable/basicnet/dhcpcd.html][blfs]], You need to type everything manually, including url's so get use to it, at least until
       ssh is installed.

       #+BEGIN_SRC shell
export BUILDDIR=/sources/build # location for downloaded tarballs
pushd $BUILDDIR
tar -xf /sources/dhcpcd-7.0.7.tar.xz
cd dhcpcd-7.0.7
./configure --libexecdir=/lib/dhcpcd --dbdir=/var/lib/dhcpcd
make
make install
popd
rm -rf $BUILDDIR/*
       #+END_SRC

****** TODO install blfs-bootscripts

       #+BEGIN_SRC shell
pushd $BUILDDIR
tar -xf /sources/blfs-bootscripts-20180105.tar.xz
cd blfs-bootscripts-20180105
make install-service-dhcpcd
popd
       #+END_SRC

       In my vm the iface name is /enp0s3/ (use =ip link= to see the interface) so //etc/sysconfig/ifconfig.enp0s3/ must be created,
       see =man ifup= for more configuration. The example //etc/sysconfig/ifconfig.eth0/ can be removed.

       #+BEGIN_SRC
ONBOOT=yes
IFACE=enp0s3
SERVICE="dhcpcd"
DHCP_START="-b"
DHCP_STOP="-k"
       #+END_SRC

**** TODO Edit /etc/fstab

     #+BEGIN_SRC 
# Begin /etc/fstab

# file system  mount-point  type     options             dump  fsck
#                                                              order

/dev/sda3      /            ext4     defaults            1     1
/dev/sda2      swap         swap     pri=1               0     0
proc           /proc        proc     nosuid,noexec,nodev 0     0
sysfs          /sys         sysfs    nosuid,noexec,nodev 0     0
devpts         /dev/pts     devpts   gid=5,mode=620      0     0
tmpfs          /run         tmpfs    defaults            0     0
devtmpfs       /dev         devtmpfs mode=0755,nosuid    0     0

# End /etc/fstab
     #+END_SRC

**** TODO Edit /etc/hostname

     #+BEGIN_SRC 
# Begin /etc/hosts

127.0.0.1 localhost
127.0.1.1 lfs.localdomain lfs
::1       localhost ip6-localhost ip6-loopback
ff02::1   ip6-allnodes
ff02::2   ip6-allrouters

# End /etc/hosts
     #+END_SRC

**** TODO Install wget

     #+BEGIN_SRC shell
export BUILDDIR=/sources/build
pushd $BUILDDIR
tar -xf /sources/wget-1.19.5.tar.gz
cd wget-1.19.5

./configure --prefix=/usr --sysconfdir=/etc --with-ssl=openssl
make
make install
popd
rm -rf $BUILDDIR/*
     #+END_SRC

**** TODO Install openssh

     #+BEGIN_SRC 
pushd /sources
wget http://ftp.openbsd.org/pub/OpenBSD/OpenSSH/portable/openssh-7.7p1.tar.gz
wget http://www.linuxfromscratch.org/patches/blfs/8.3/openssh-7.7p1-openssl-1.1.0-1.patch
popd
pushd $BUILDDIR
tar -xf /sources/openssh-7.7p1.tar.gz
cd openssh-7.7p1.tar.gz
install -v -m700 -d /var/lib/sshd
chown -v root:sys /var/lib/sshd
groupadd -g 50 sshd
useradd -c 'sshd PrivSep' -d /var/lib/sshd -g sshd -s /bin/false -u 50 sshd
patch -Np1 -i /sources/openssh-7.7p1-openssl-1.1.0-1.patch
./configure --prefix=/usr --sysconfdir=/etc/ssh --with-md5-passwords --with-privsep-path=/var/lib/sshd
make
make install
install -v -m755 contrib/ssh-copy-id /usr/bin
install -v -m644 contrib/ssh-copy-id.1 \
        /usr/share/man/man1
install -v -m755 -d /usr/share/doc/openssh-7.7p1
install -v -m644 INSTALL LICENCE OVERVIEW README* \
        /usr/share/doc/openssh-7.7p1
cd ..
tar -xf /sources/blfs-bootscripts-20180105.tar.xz
cd blfs-bootscripts-20180105
make install-sshd
popd
rm -rf $BUILDDIR/*

# start the service
/etc/rc.d/init.d/sshd start
     #+END_SRC

     Ssh from the host machine can now be done with =ssh root@<vm-ip-address>=.

***** Install avahi 
      - [[http://www.linuxfromscratch.org/blfs/view/stable/basicnet/avahi.html][source]]
****** Install glib2(dependency for avahi) 
       - [[http://www.linuxfromscratch.org/blfs/view/stable/general/glib2.html][source]]

       #+BEGIN_SRC shell
export BUILDDIR=/sources/build
pushd /sources
wget http://ftp.gnome.org/pub/gnome/sources/glib/2.56/glib-2.56.1.tar.xz
wget http://www.linuxfromscratch.org/patches/blfs/8.3/glib-2.56.1-skip_warnings-1.patch
popd
pushd $BUILDDIR
tar -xf /sources/glib-2.56.1.tar.xz
cd glib-2.56.1
patch -Np1 -i /sources/glib-2.56.1-skip_warnings-1.patch
./configure --prefix=/usr --with-python=/usr/bin/python3 --with-pcre=internal
make
make install
popd
rm -rf $BUILDDIR/*
       #+END_SRC
****** Install libdaemon(dependency for avahi)
       - [[http://www.linuxfromscratch.org/blfs/view/stable/general/libdaemon.html][source]]

       #+BEGIN_SRC shell
pushd /sources
wget http://0pointer.de/lennart/projects/libdaemon/libdaemon-0.14.tar.gz
popd

pushd $BUILDDIR
tar -xf /sources/libdaemon-0.14.tar.gz
cd libdaemon-0.14
./configure --prefix=/usr --disable-static
make
make docdir=/usr/share/doc/libdaemon-0.14 install
popd
rm -rf $BUILDDIR/*
       #+END_SRC

       - avahi
       #+BEGIN_SRC shell
pushd /sources
wget https://github.com/lathiat/avahi/releases/download/v0.7/avahi-0.7.tar.gz --no-check-certificate
popd
pushd $BUILDDIR
groupadd -fg 84 avahi
useradd -c "Avahi Daemon Owner" -d /var/run/avahi-daemon -u 84 \
        -g avahi -s /bin/false avahi
groupadd -fg 86 netdev
tar -xf /sources/avahi-0.7.tar.gz
cd avahi-0.7
./configure --prefix=/usr --sysconfdir=/etc --localstatedir=/var --disable-static \
            --disable-mono --disable-monodoc --disable-python --disable-qt3 --disable-qt4 \
            --enable-core-docs --with-distro=none --with-systemdsystemunitdir=no \
            --disable-gtk --disable-gtk3 --disable-dbus
make
make install
cd $BUILDDIR
tar -xf /sources/blfs-bootscripts-20180105.tar.xz
cd blfs-bootscripts-20180105
make install-avahi
popd
rm -rf $BUILDDIR/*
/etc/rc.d/init.d/avahi start
       #+END_SRC

       Edit /etc/ssh/sshd_config, add /PermitRootLogin yes/ to the bottom and restart sshd =/etc/rc.d/init.d/sshd restart=.
       Copy your host ssh-key using =ssh-copy-id root@<ip-of-the-vm-lfs>=, after that you can ssh without password
       to the vm. And the /PermitRootLogin/ addition can now be removed for security.

       Now shutdown the vm (type =init 0= from the command-line). Next time you want to start the vm, do it from
       the command line:

       #+BEGIN_SRC shell
VBoxManage list vms
       #+END_SRC

       #+RESULTS:
       : linuxfromscratch {80ad5103-7788-4d26-a9c9-5a77b9d13c4e}

       #+BEGIN_SRC shell
VBoxManage startvm linuxfromscratch --type headless
       #+END_SRC

       With avahi enabled you can ssh with /ssh root@lfs.local/, and for powering off use 
       /VBoxManage controlvm linuxfromscratch poweroff/.
