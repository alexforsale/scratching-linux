# -*- mode: sh -*-
# Maintainer: %s <%s>
pkgbase=glibc
pkgname=(glibc lib32-glibc)
pkgver=2.28
pkgrel=1
pkgdesc="contains the main C library"
license=(GPL LGPL)
options=(!strip staticlibs)
arch=('x86_64')
_deps=('gd' 'lib32-gcc-libs')
depends=('linux-api-headers')
source=(http://ftp.gnu.org/gnu/glibc/glibc-2.28.tar.xz
        glibc-2.28-fhs-1.patch
        ld.so.conf
        locale.gen.txt
        locale-gen
        lib32-glibc.conf
        nsswitch.conf
       )
validpgpkeys=(7273542B39962DF7B299931416792B4EA25340F8) # Carlos O'Donell
groups=('lfs-base')

for _d in "${_deps[@]}";do
  if [[ -n "$(pacman -Ss "^${_d}$" 2>/dev/null)" ]];then
    depends+=( "${_d}")
  else
    optdepends+=( "${_d}")
  fi
done


prepare(){
  mkdir -p glibc-build lib32-glibc-build

  [[ -d glibc-$pkgver ]] && ln -s glibc-$pkgver glibc 
  cd glibc-$pkgver

  local i; for i in ${source[@]}; do
             case ${i%::*} in
               *.patch)
                 msg2 "Applying ${i}"
                 patch -p1 -i "$srcdir/${i}"
                 ;;
             esac
           done

  local _configure_flags=(
    --prefix=/usr
    --with-headers=/usr/include
    --enable-add-ons
    --enable-bind-now
    --enable-lock-elision
    --enable-multi-arch
    --enable-stack-protector=strong
    --enable-stackguard-randomization
    --enable-static-pie
    --disable-profile
    --disable-werror
  )

  cd "$srcdir/glibc-build"

  echo "slibdir=/usr/lib" >> configparms

  # remove fortify for building libraries
  CPPFLAGS=${CPPFLAGS/-D_FORTIFY_SOURCE=2/} \
          # In chroot, uncomment the following three lines to avoid invalid paths
          # in debug symbols, however, you will also need to guard "make -k" to avoid
          # an incorrect replacment of the real /usr/include/limits.h
          _gccver=$(gcc --version | grep -o "[0-9]\.[0-9]\.[0-9]") \
            GCC_INCDIR="/usr/lib/gcc/${CARCH}/${_gccver}/include" \
            CC="gcc -isystem $GCC_INCDIR -isystem /usr/include" \
            "$srcdir/glibc-$pkgver/configure" \
            --libdir=/usr/lib \
            --libexecdir=/usr/lib \
            ${_configure_flags[@]}
  
  cd "$srcdir/lib32-glibc-build"
  echo "slibdir=/usr/lib32" >> configparms
  echo "rtlddir=/usr/lib32" >> configparms

  # In chroot, uncomment the following three lines to avoid invalid paths
  # in debug symbols, however, you will also need to guard "make -k" to avoid
  # an incorrect replacment of the real /usr/include/limits.h
  _gccver=$(gcc --version | grep -o "[0-9]\.[0-9]\.[0-9]") \
         GCC_INCDIR="/usr/lib/gcc/${CARCH}/${_gccver}/include" \
         CC="gcc -m32 -mstackrealign -isystem $GCC_INCDIR -isystem /usr/include" \
         CXX="g++ -m32 -mstackrealign -isystem $GCC_INCDIR -isystem /usr/include" \
         CPPFLAGS=${CPPFLAGS/-D_FORTIFY_SOURCE=2/} \
         CFLAGS=${CFLAGS/-fno-plt/} \
         CXXFLAGS=${CXXFLAGS/-fno-plt/} \
         "$srcdir/glibc-$pkgver/configure" \
         --host=i686-pc-linux-gnu \
         --libdir=/usr/lib32 \
         --libexecdir=/usr/lib32 \
         ${_configure_flags[@]}
}

build(){
  cd "$srcdir/glibc-build"
  # build libraries with fortify disabled
  echo "build-programs=no" >> configparms
  make
  # re-enable fortify for programs
  sed -i "/build-programs=/s#no#yes#" configparms

  echo "CC += -D_FORTIFY_SOURCE=2" >> configparms
  echo "CXX += -D_FORTIFY_SOURCE=2" >> configparms
  make

  cd "$srcdir/lib32-glibc-build"
  # build libraries with fortify disabled
  echo "build-programs=no" >> configparms
  make

  # re-enable fortify for programs
  sed -i "/build-programs=/s#no#yes#" configparms

  echo "CC += -D_FORTIFY_SOURCE=2" >> configparms
  echo "CXX += -D_FORTIFY_SOURCE=2" >> configparms
  make
}

check(){
  cd glibc-build

  # remove fortify in preparation to run test-suite
  sed -i '/FORTIFY/d' configparms

  # some failures are "expected"
  make check || true

  # Get test rusults together into one file
  for file in `find . -name "*.sum"`
  do
    cat $file >> tests-summary
  done
}

package_glibc(){
  pkgdesc='GNU C Library'
  depends=('linux-api-headers>=4.10'
          )
  optdepends=('gd: for memusagestat')
  install=glibc.install
  backup=(etc/gai.conf
          etc/locale.gen
          etc/nscd.conf)

  sed '/test-installation/s@$(PERL)@echo not running@' -i glibc-$pkgver/Makefile

  make -C glibc-build install_root="$pkgdir" install
  rm -f "$pkgdir"/etc/ld.so.{cache,conf}

  # Shipped in tzdata
  rm -f "$pkgdir"/usr/bin/tzselect
  rm -f "$pkgdir"/usr/sbin/zic
  
  install -dm755 "$pkgdir/etc"
  install -m755 "$srcdir/ld.so.conf" "$pkgdir/etc"

  cd glibc

  install -dm755 "$pkgdir"/usr/lib/{locale,tmpfiles.d}
  install -m644 nscd/nscd.conf "$pkgdir/etc/nscd.conf"
  install -dm755 "$pkgdir/var/cache/nscd"

  install -m644 posix/gai.conf "$pkgdir"/etc/gai.conf

  install -m755 "$srcdir/locale-gen" "$pkgdir/usr/bin"

  install -vm644 "$srcdir/nsswitch.conf" "$pkgdir/etc"
  
  # Create /etc/locale.gen
  install -m644 "$srcdir/locale.gen.txt" "$pkgdir/etc/locale.gen"

  # uncomment locales by default required for LFS testsuites
  echo "# These locales are requried for LFS testsuites, do not comment out" \
       >> "${pkgdir}/etc/locale.gen"
  echo "cs_CZ.UTF-8 UTF-8" >> "${pkgdir}/etc/locale.gen"
  echo "de_DE ISO-8859-1" >> "${pkgdir}/etc/locale.gen"
  echo "de_DE@euro ISO-8859-15" >> "${pkgdir}/etc/locale.gen"
  echo "de_DE.UTF-8 UTF-8" >> "${pkgdir}/etc/locale.gen"
  echo "en_GB.UTF-8 UTF-8" >> "${pkgdir}/etc/locale.gen"
  echo "en_HK ISO-8859-1" >> "${pkgdir}/etc/locale.gen"
  echo "en_PH ISO-8859-1" >> "${pkgdir}/etc/locale.gen"
  echo "en_US ISO-8859-1" >> "${pkgdir}/etc/locale.gen"
  echo "en_US.UTF-8 UTF-8" >> "${pkgdir}/etc/locale.gen"
  echo "es_MX ISO-8859-1" >> "${pkgdir}/etc/locale.gen"
  echo "fa_IR UTF-8" >> "${pkgdir}/etc/locale.gen"
  echo "fr_FR ISO-8859-1" >> "${pkgdir}/etc/locale.gen"
  echo "fr_FR@euro ISO-8859-15" >> "${pkgdir}/etc/locale.gen"
  echo "fr_FR.UTF-8 UTF-8" >> "${pkgdir}/etc/locale.gen"
  echo "it_IT ISO-8859-1" >> "${pkgdir}/etc/locale.gen"
  echo "it_IT.UTF-8 UTF-8" >> "${pkgdir}/etc/locale.gen"
  echo "ja_JP EUC-JP" >> "${pkgdir}/etc/locale.gen"
  echo "ru_RU.KOI8-R KOI8-R" >> "${pkgdir}/etc/locale.gen"
  echo "ru_RU.UTF-8 UTF-8" >> "${pkgdir}/etc/locale.gen"
  echo "tr_TR.UTF-8 UTF-8" >> "${pkgdir}/etc/locale.gen"
  echo "zh_CN.GB18030 GB18030" >> "${pkgdir}/etc/locale.gen"
  echo "" >> "${pkgdir}/etc/locale.gen"
  sed -e '1,3d' -e 's|/| |g' -e 's|\\| |g' -e 's|^|#|g' \
      "$srcdir/glibc/localedata/SUPPORTED" >> "$pkgdir/etc/locale.gen"

  install -v -d -m755 "${pkgdir}/lib"
  ln -sv ../lib64/ld-linux-x86-64.so.2 "${pkgdir}"/lib/ld-linux-x86-64.so.2
  ln -s ../lib/ld-linux-x86-64.so.2 "${pkgdir}/lib64/ld-lsb-x86-64.so.3"
  
  if check_option 'debug' n; then
    find "$pkgdir"/usr/bin -type f -executable -exec strip $STRIP_BINARIES {} + 2> /dev/null || true
    find "$pkgdir"/usr/lib -name '*.a' -type f -exec strip $STRIP_STATIC {} + 2> /dev/null || true

    # Do not strip these for gdb and valgrind functionality, but strip the rest
    find "$pkgdir"/usr/lib \
         -not -name 'ld-*.so' \
         -not -name 'libc-*.so' \
         -not -name 'libpthread-*.so' \
         -not -name 'libthread_db-*.so' \
         -name '*-*.so' -type f -exec strip $STRIP_SHARED {} + 2> /dev/null || true
  fi
}

package_lib32-glibc(){
  pkgdesc='GNU C Library (32-bit)'
  depends=("glibc=$pkgver")

  cd lib32-glibc-build

  make install_root="$pkgdir" install
  rm -rf "$pkgdir"/{etc,sbin,usr/{bin,sbin,share},var}

  # We need to keep 32 bit specific header files
  find "$pkgdir/usr/include" -type f -not -name '*-32.h' -delete

  # Dynamic linker
  install -d "$pkgdir/usr/lib"
  ln -s ../lib32/ld-linux.so.2 "$pkgdir/usr/lib/"

  # Add lib32 paths to the default library search path
  install -Dm644 "$srcdir/lib32-glibc.conf" "$pkgdir/etc/ld.so.conf.d/lib32-glibc.conf"

  # Symlink /usr/lib32/locale to /usr/lib/locale
  ln -s ../lib/locale "$pkgdir/usr/lib32/locale"

  if check_option 'debug' n; then
    find "$pkgdir"/usr/lib32 -name '*.a' -type f -exec strip $STRIP_STATIC {} + 2> /dev/null || true
    find "$pkgdir"/usr/lib32 \
         -not -name 'ld-*.so' \
         -not -name 'libc-*.so' \
         -not -name 'libpthread-*.so' \
         -not -name 'libthread_db-*.so' \
         -name '*-*.so' -type f -exec strip $STRIP_SHARED {} + 2> /dev/null || true
  fi
}

md5sums=('c81d2388896379997bc359d4f2084239'
         '9a5997c3452909b1769918c759eff8a2'
         'c3e8b7252a6c07c663e4df7e769a5d7a'
         '07ac979b6ab5eeb778d55f041529d623'
         '476e9113489f93b348b21e144b6a8fcf'
         '98430c40a2ac3c3e0d7617121129ca26'
         'ae044a8890139fc17b45393963851e6d')
